// automatically generated by the FlatBuffers compiler, do not modify

import { DeviceIdTable, DeviceIdTableT } from '../../solarxr-protocol/datatypes/device-id-table.js';
import { SerialDeviceId, SerialDeviceIdT } from '../../solarxr-protocol/rpc/serial-device-id.js';


export enum FirmwareDeviceId {
  NONE = 0,
  solarxr_protocol_datatypes_DeviceIdTable = 1,
  SerialDeviceId = 2
}

export function unionToFirmwareDeviceId(
  type: FirmwareDeviceId,
  accessor: (obj:DeviceIdTable|SerialDeviceId) => DeviceIdTable|SerialDeviceId|null
): DeviceIdTable|SerialDeviceId|null {
  switch(FirmwareDeviceId[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_DeviceIdTable': return accessor(new DeviceIdTable())! as DeviceIdTable;
    case 'SerialDeviceId': return accessor(new SerialDeviceId())! as SerialDeviceId;
    default: return null;
  }
}

export function unionListToFirmwareDeviceId(
  type: FirmwareDeviceId, 
  accessor: (index: number, obj:DeviceIdTable|SerialDeviceId) => DeviceIdTable|SerialDeviceId|null, 
  index: number
): DeviceIdTable|SerialDeviceId|null {
  switch(FirmwareDeviceId[type]) {
    case 'NONE': return null; 
    case 'solarxr_protocol_datatypes_DeviceIdTable': return accessor(index, new DeviceIdTable())! as DeviceIdTable;
    case 'SerialDeviceId': return accessor(index, new SerialDeviceId())! as SerialDeviceId;
    default: return null;
  }
}
