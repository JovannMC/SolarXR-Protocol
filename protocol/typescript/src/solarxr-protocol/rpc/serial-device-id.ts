// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SerialDeviceId implements flatbuffers.IUnpackableObject<SerialDeviceIdT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SerialDeviceId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSerialDeviceId(bb:flatbuffers.ByteBuffer, obj?:SerialDeviceId):SerialDeviceId {
  return (obj || new SerialDeviceId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSerialDeviceId(bb:flatbuffers.ByteBuffer, obj?:SerialDeviceId):SerialDeviceId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SerialDeviceId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

port():string|null
port(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
port(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSerialDeviceId(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPort(builder:flatbuffers.Builder, portOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, portOffset, 0);
}

static endSerialDeviceId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSerialDeviceId(builder:flatbuffers.Builder, portOffset:flatbuffers.Offset):flatbuffers.Offset {
  SerialDeviceId.startSerialDeviceId(builder);
  SerialDeviceId.addPort(builder, portOffset);
  return SerialDeviceId.endSerialDeviceId(builder);
}

unpack(): SerialDeviceIdT {
  return new SerialDeviceIdT(
    this.port()
  );
}


unpackTo(_o: SerialDeviceIdT): void {
  _o.port = this.port();
}
}

export class SerialDeviceIdT implements flatbuffers.IGeneratedObject {
constructor(
  public port: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const port = (this.port !== null ? builder.createString(this.port!) : 0);

  return SerialDeviceId.createSerialDeviceId(builder,
    port
  );
}
}
