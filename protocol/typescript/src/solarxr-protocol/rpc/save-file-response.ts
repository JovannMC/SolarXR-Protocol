// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class SaveFileResponse implements flatbuffers.IUnpackableObject<SaveFileResponseT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SaveFileResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSaveFileResponse(bb:flatbuffers.ByteBuffer, obj?:SaveFileResponse):SaveFileResponse {
  return (obj || new SaveFileResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSaveFileResponse(bb:flatbuffers.ByteBuffer, obj?:SaveFileResponse):SaveFileResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SaveFileResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * Where to save the file, if null, server will choose where to save it
 */
path():string|null
path(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
path(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * If the user canceled the file save
 */
canceled():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

static startSaveFileResponse(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPath(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pathOffset, 0);
}

static addCanceled(builder:flatbuffers.Builder, canceled:boolean) {
  builder.addFieldInt8(1, +canceled, 0);
}

static endSaveFileResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSaveFileResponse(builder:flatbuffers.Builder, pathOffset:flatbuffers.Offset, canceled:boolean|null):flatbuffers.Offset {
  SaveFileResponse.startSaveFileResponse(builder);
  SaveFileResponse.addPath(builder, pathOffset);
  if (canceled !== null)
    SaveFileResponse.addCanceled(builder, canceled);
  return SaveFileResponse.endSaveFileResponse(builder);
}

unpack(): SaveFileResponseT {
  return new SaveFileResponseT(
    this.path(),
    this.canceled()
  );
}


unpackTo(_o: SaveFileResponseT): void {
  _o.path = this.path();
  _o.canceled = this.canceled();
}
}

export class SaveFileResponseT implements flatbuffers.IGeneratedObject {
constructor(
  public path: string|Uint8Array|null = null,
  public canceled: boolean|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const path = (this.path !== null ? builder.createString(this.path!) : 0);

  return SaveFileResponse.createSaveFileResponse(builder,
    path,
    this.canceled
  );
}
}
