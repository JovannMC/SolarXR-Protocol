// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FirmwareUpdateRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FirmwareUpdateRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FirmwareUpdateRequest<'a> {
  type Inner = FirmwareUpdateRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FirmwareUpdateRequest<'a> {
  pub const VT_FLASHING_METHOD: flatbuffers::VOffsetT = 4;
  pub const VT_DEVICE_ID_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_DEVICE_ID: flatbuffers::VOffsetT = 8;
  pub const VT_SSID: flatbuffers::VOffsetT = 10;
  pub const VT_PASSWORD: flatbuffers::VOffsetT = 12;
  pub const VT_FIRMWARE_PART: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FirmwareUpdateRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FirmwareUpdateRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<FirmwareUpdateRequest<'bldr>> {
    let mut builder = FirmwareUpdateRequestBuilder::new(_fbb);
    if let Some(x) = args.firmware_part { builder.add_firmware_part(x); }
    if let Some(x) = args.password { builder.add_password(x); }
    if let Some(x) = args.ssid { builder.add_ssid(x); }
    if let Some(x) = args.device_id { builder.add_device_id(x); }
    builder.add_device_id_type(args.device_id_type);
    builder.add_flashing_method(args.flashing_method);
    builder.finish()
  }


  /// The method used to flash the firmware, OTA or Serial
  #[inline]
  pub fn flashing_method(&self) -> FlashingMethod {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlashingMethod>(FirmwareUpdateRequest::VT_FLASHING_METHOD, Some(FlashingMethod::NONE)).unwrap()}
  }
  #[inline]
  pub fn device_id_type(&self) -> FirmwareDeviceId {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FirmwareDeviceId>(FirmwareUpdateRequest::VT_DEVICE_ID_TYPE, Some(FirmwareDeviceId::NONE)).unwrap()}
  }
  /// Unique id of the device, depending on the flashing method this could be:
  /// - Using Serial -> a port id
  /// - Using OTA -> the actual DeviceId from the protocol
  #[inline]
  pub fn device_id(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(FirmwareUpdateRequest::VT_DEVICE_ID, None)}
  }
  /// Credentials to provision after the flashing
  /// Only used with Serial flashing, because OTA is already connected to the wifi
  #[inline]
  pub fn ssid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FirmwareUpdateRequest::VT_SSID, None)}
  }
  #[inline]
  pub fn password(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FirmwareUpdateRequest::VT_PASSWORD, None)}
  }
  /// A list of urls and offsets of the different firmware files to flash
  /// This is the most generic way i thougt. Because we can either send github release url directly or firmware tool
  /// file link
  /// In the case of OTA flashing the list should only contain one file, and the offset will be ignored
  #[inline]
  pub fn firmware_part(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FirmwarePart<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FirmwarePart>>>>(FirmwareUpdateRequest::VT_FIRMWARE_PART, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn device_id_as_solarxr_protocol_datatypes_device_id_table(&self) -> Option<super::datatypes::DeviceIdTable<'a>> {
    if self.device_id_type() == FirmwareDeviceId::solarxr_protocol_datatypes_DeviceIdTable {
      self.device_id().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { super::datatypes::DeviceIdTable::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn device_id_as_serial_device_id(&self) -> Option<SerialDeviceId<'a>> {
    if self.device_id_type() == FirmwareDeviceId::SerialDeviceId {
      self.device_id().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { SerialDeviceId::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for FirmwareUpdateRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<FlashingMethod>("flashing_method", Self::VT_FLASHING_METHOD, false)?
     .visit_union::<FirmwareDeviceId, _>("device_id_type", Self::VT_DEVICE_ID_TYPE, "device_id", Self::VT_DEVICE_ID, false, |key, v, pos| {
        match key {
          FirmwareDeviceId::solarxr_protocol_datatypes_DeviceIdTable => v.verify_union_variant::<flatbuffers::ForwardsUOffset<super::datatypes::DeviceIdTable>>("FirmwareDeviceId::solarxr_protocol_datatypes_DeviceIdTable", pos),
          FirmwareDeviceId::SerialDeviceId => v.verify_union_variant::<flatbuffers::ForwardsUOffset<SerialDeviceId>>("FirmwareDeviceId::SerialDeviceId", pos),
          _ => Ok(()),
        }
     })?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ssid", Self::VT_SSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("password", Self::VT_PASSWORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FirmwarePart>>>>("firmware_part", Self::VT_FIRMWARE_PART, false)?
     .finish();
    Ok(())
  }
}
pub struct FirmwareUpdateRequestArgs<'a> {
    pub flashing_method: FlashingMethod,
    pub device_id_type: FirmwareDeviceId,
    pub device_id: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    pub ssid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub password: Option<flatbuffers::WIPOffset<&'a str>>,
    pub firmware_part: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FirmwarePart<'a>>>>>,
}
impl<'a> Default for FirmwareUpdateRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    FirmwareUpdateRequestArgs {
      flashing_method: FlashingMethod::NONE,
      device_id_type: FirmwareDeviceId::NONE,
      device_id: None,
      ssid: None,
      password: None,
      firmware_part: None,
    }
  }
}

pub struct FirmwareUpdateRequestBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FirmwareUpdateRequestBuilder<'a, 'b> {
  #[inline]
  pub fn add_flashing_method(&mut self, flashing_method: FlashingMethod) {
    self.fbb_.push_slot::<FlashingMethod>(FirmwareUpdateRequest::VT_FLASHING_METHOD, flashing_method, FlashingMethod::NONE);
  }
  #[inline]
  pub fn add_device_id_type(&mut self, device_id_type: FirmwareDeviceId) {
    self.fbb_.push_slot::<FirmwareDeviceId>(FirmwareUpdateRequest::VT_DEVICE_ID_TYPE, device_id_type, FirmwareDeviceId::NONE);
  }
  #[inline]
  pub fn add_device_id(&mut self, device_id: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FirmwareUpdateRequest::VT_DEVICE_ID, device_id);
  }
  #[inline]
  pub fn add_ssid(&mut self, ssid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FirmwareUpdateRequest::VT_SSID, ssid);
  }
  #[inline]
  pub fn add_password(&mut self, password: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FirmwareUpdateRequest::VT_PASSWORD, password);
  }
  #[inline]
  pub fn add_firmware_part(&mut self, firmware_part: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FirmwarePart<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FirmwareUpdateRequest::VT_FIRMWARE_PART, firmware_part);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FirmwareUpdateRequestBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FirmwareUpdateRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FirmwareUpdateRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FirmwareUpdateRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FirmwareUpdateRequest");
      ds.field("flashing_method", &self.flashing_method());
      ds.field("device_id_type", &self.device_id_type());
      match self.device_id_type() {
        FirmwareDeviceId::solarxr_protocol_datatypes_DeviceIdTable => {
          if let Some(x) = self.device_id_as_solarxr_protocol_datatypes_device_id_table() {
            ds.field("device_id", &x)
          } else {
            ds.field("device_id", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        FirmwareDeviceId::SerialDeviceId => {
          if let Some(x) = self.device_id_as_serial_device_id() {
            ds.field("device_id", &x)
          } else {
            ds.field("device_id", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("device_id", &x)
        },
      };
      ds.field("ssid", &self.ssid());
      ds.field("password", &self.password());
      ds.field("firmware_part", &self.firmware_part());
      ds.finish()
  }
}
